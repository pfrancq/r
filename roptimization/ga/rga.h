/*

	R Project Library

	RGA.h

	Genetic Algorithms - Header

	Copyright 1998-2012 by Pascal Francq (pascal@francq.info).
	Copyright 1998-2008 by the Universit√© Libre de Bruxelles (ULB).

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Library General Public
	License as published by the Free Software Foundation; either
	version 2.0 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library, as a file COPYING.LIB; if not, write
	to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
	Boston, MA  02111-1307  USA

*/



//------------------------------------------------------------------------------
#ifndef RGA_H
#define RGA_H


//------------------------------------------------------------------------------
// include files for AINSI C/C++
#include <stdlib.h>
#ifndef RGADEBUG
	#define RGADEBUG 1
#endif


//------------------------------------------------------------------------------
// include files for R Project
#include <rstd.h>
#include <rstring.h>
#include <rcontainer.h>
#include <rtrace.h>
#include <rtextfile.h>
#include <rrandom.h>


//------------------------------------------------------------------------------
namespace R{
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// General Variables
/**
* If true, GA stops
*/
extern bool ExternBreak;


//------------------------------------------------------------------------------
/**
* The RGAException class provides an exception generated by the GA.
* @author Pascal Francq
* @short GA Exception.
*/
class RGAException : public RException
{
protected:

	/**
	 * Type of the exception.
	 */
	RString Type;

public:

	/**
	* Construct a GA exception with a particular message.
	* @param type            Type of the exception.
	* @param str             Message of the error.
	*/
	RGAException(const RString& type,const RString& str);

	/**
	* Construct a GA exception with the message "func [where]: str". A
	* typical use is:
	* @code
	* if(!ptr)
	* 	throw RGAException("Mutation",__PRETTY_FUNCTION__,__LINE__,"ptr cannot be a null pointer");
	* @endcode
	* @see The mThrowRGAException2 macro.
	* @param type            Type of the exception.
	* @param func            Function producing the error.
	* @param where           Line position of the error.
	* @param str             Message of the error.
	*/
	RGAException(const RString& type,const RString& func,long where,const RString& str);

	/**
	 * Get the type of the exception.
	 */
	RString GetType(void) const {return(Type);}
};


//------------------------------------------------------------------------------
// Macros to generate a RGAException
#define mThrowRGAException(type,msg) throw RGAException(type,__PRETTY_FUNCTION__,__LINE__,msg)


//------------------------------------------------------------------------------
// Forward declaration
template<class cVal,bool Max> class RFitness;
template<class cInst,class cChromo,class cFit,class cThreadData> class RChromo;
template<class cInst,class cChromo,class cFit,class cThreadData> class RInst;


}  //------- End of namespace R ------------------------------------------------


//------------------------------------------------------------------------------
#endif
