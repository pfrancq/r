/*

	R Project Library

	RPrg.h

	Generic script program - Header.

	Copyright 2002-2008 by the Universit√© Libre de Bruxelles.

	Authors:
		Pascal Francq (pfrancq@ulb.ac.be).

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Library General Public
	License as published by the Free Software Foundation; either
	version 2.0 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Library General Public License for more details.

	You should have received a copy of the GNU Library General Public
	License along with this library, as a file COPYING.LIB; if not, write
	to the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
	Boston, MA  02111-1307  USA

*/



//------------------------------------------------------------------------------
#ifndef RPrgH
#define RPrgH


//------------------------------------------------------------------------------
// include files for R Project
#include <rtextfile.h>
#include <rstack.h>
#include <rcursor.h>


//------------------------------------------------------------------------------
namespace R{
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// forward class declaration
class RPrgOutput;
class RPrgInst;
class RPrgInstBlock;
class RPrgVar;
class RPrgClass;
class RPrg;


//------------------------------------------------------------------------------
/**
* The RPrgException class provides an exception generated by the program.
* @author Pascal Francq
* @short Program Exception.
*/
class RPrgException : public RException
{
	/**
	 * Program that generates the exception.
	 */
	const RPrg* Prg;

public:

	/**
	* Construct an exception.
	* @param prg             Program.
	*/
	RPrgException(const RPrg* prg) throw();

	/**
	* Construct an exception.
	* @param prg             Program.
	* @param str             Message of the error.
	*/
	RPrgException(const RPrg* prg,const char* str) throw();

	/**
	 * Get a pointer to the program generating the error.
	 * @param
	 * @return
	 */
	const RPrg* GetPrg(void) const {return(Prg);}
};


//------------------------------------------------------------------------------
/**
* The RPrg provides a class for executing a script program.
* @author Pascal Francq
* @short Script Program.
*/
class RPrg
{
protected:

	/**
	* Name of the file to execute.
	*/
	R::RString FileName;

	/**
	* Generic output.
	*/
	R::RPrgOutput* Cout;

	/**
	* List of all "Instructions" to execute.
	*/
	R::RContainer<RPrgInst,true,false> Insts;

	/**
	* List of all global "Variables" defined in the program.
	*/
	R::RContainer<RPrgVar,true,false> Vars;

	/**
	* List of all "Classes" defined in the program.
	*/
	R::RContainer<RPrgClass,true,false> Classes;

	/**
	 * Stack of blocks of instructions
	 */
	R::RStack<RPrgInstBlock,false,true,true> Blocks;

	/**
	* Program file.
	*/
	R::RTextFile Prg;

	/**
	* Temporary string.
	*/
	RString buf;

	/**
	* Must a line be read;
	*/
	bool ReadLine;

	/**
	 * Number of the line where the last instruction begins.
	 */
	size_t Line;

public:

	/**
	* Constructor of a program.
	* @param f              Name of the file.
	* @param o              Output.
	*/
	RPrg(R::RString f,RPrgOutput* o);

	/**
	* Load the script file.
	*/
	void Load(void);

	/**
	 * Return a string of the form "filename(line)" representing the current
	 * element treated.
	 */
	RString WhatTreated(void) const;

	/**
	 * Get the line number where the last instruction begins.
	 */
	size_t GetNbLine(void) const {return(Line);}

	/**
	* Execute a "program".
	*/
	void Exec(void);

protected :

	/**
	* Count the number of tabs at the begin of a line of source code.
	* @param line           Line to analyze.
	* @returns size_t.
	*/
	size_t CountTabs(const RString& line);

	/**
	* Analyze the parameters.
	* @param values         Values of the parameter.
	*/
	void AnalyseParam(RContainer<RPrgVar,true,false>& values);

	/**
	 * Read a literal value.
	 */
	RString ReadLiteral(void);

public:

	/**
	* Add a variable.
	* @param var             Pointer to the variable.
	*/
	void AddVar(RPrgVar* var);

	/**
	* Remove a variable.
	* @param var             Pointer to the variable.
	*/
	void DelVar(RPrgVar* var);

	/**
	 * Add an instruction.
	 * @param inst           Instruction.
	 */
	void AddInst(RPrgInst* inst);

	/**
	 * Find a variable by searching in all local blocks.
	 * @param name           Name of the variable.
	 * @return Pointer to the variable or 0 if not found.
	 */
	RPrgVar* Find(const RString& name) const;

	/**
	* Get the value of the variable.
	* @param var            Name of the variable.
	*/
	virtual RString GetValue(const RString& var);

	/**
	* Add a class.
	* @param c               Pointer to the class.
	*/
	void AddVar(RPrgClass* c);

	/**
	* Remove a class.
	* @param c               Pointer to the class.
	*/
	void DelVar(RPrgClass* c);

	/**
	* Get a cursor over the classes.
	*/
	RCursor<RPrgClass> GetClasses(void) const;

	/**
	 * Get the name of the program.
	 */
	RString GetFileName(void) const {return(FileName);}

	/**
	* Destruct of the program.
	*/
	virtual ~RPrg(void);

	// friend class
	friend class RPrgInstFor;
	friend class RPrgInstMethod;
	friend class RPrgInstNew;
};


}  //-------- End of namespace R -----------------------------------------------


//------------------------------------------------------------------------------
#endif
